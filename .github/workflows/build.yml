name: Flutter Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
  STORE_FILE: '../keystore.jks'

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl xz-utils git>=2.0 bash unzip bash zip

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install jq
        run: |
          wget -O jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
          chmod +x ./jq
          mv jq /usr/local/bin

      - name: Install Android SDK Command Line Tools
        run: |
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O commandlinetools.zip
          mkdir -p $HOME/android-sdk/cmdline-tools/latest
          unzip commandlinetools.zip -d $HOME/android-sdk/cmdline-tools/latest
          mv $HOME/android-sdk/cmdline-tools/latest/cmdline-tools/* $HOME/android-sdk/cmdline-tools/latest/
          export ANDROID_HOME=$HOME/android-sdk
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Accept Android SDK Licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

      - name: Install Android SDK Packages
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2" || true

      - name: Add exception
        run: git config --global --add safe.directory /opt/hostedtoolcache/flutter/*

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Flutter web
        run: flutter build web --release

      - name: Zip the web directory
        run: |
          zip -r web-release.zip build/web/

      - name: Change base href for GitHub Pages
        run: |
          sed -i 's|<base href="/">|<base href="/abs_flutter">|' build/web/index.html

      - name: upload page artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

      - name: Setup Keystore
        run: echo "${{ secrets.STORE }}" | base64 -d > android/keystore.jks

      - name: Build APK
        run: flutter build apk --release

      - name: Build AppBundle
        run: flutter build appbundle --release

      - name: Move APK and AAB files
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk app-release.apk
          mv build/app/outputs/bundle/release/app-release.aab app-release.aab

      - name: Upload APK, AAB, and Web Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-build-artifacts
          path: |
            app-release.apk
            app-release.aab
            web-release.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Extract version from pubspec.yaml
        id: extract_version
        shell: pwsh
        run: |
          $versionLine = Get-Content pubspec.yaml | Select-String -Pattern '^version:'
          $version = $versionLine -replace 'version: ', '' -replace '\+.*', ''
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Flutter Windows
        run: flutter build windows --release

      - name: Zip the Release folder
        run: |
          Compress-Archive -Path "build/windows/x64/runner/Release" -DestinationPath "Release-${{ env.VERSION }}.zip"

      - name: Create MSIX package
        run: dart run msix:create

      - name: Move MSIX file
        run: |
          $sourcePath = "build/windows/x64/runner/Release/abs_flutter.msix"
          $destinationPath = "release-${{ env.VERSION }}.msix"
          Move-Item -Path $sourcePath -Destination $destinationPath
        shell: pwsh

      - name: Upload Windows Build and MSIX Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifacts
          path: |
            Release-${{ env.VERSION }}.zip
            release-${{ env.VERSION }}.msix

  create-release:
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-windows]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-build-artifacts
          path: ./linux-artifacts

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build-artifacts
          path: ./windows-artifacts

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //;s/+.*//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: true
          files: |
            linux-artifacts/app-release.apk
            linux-artifacts/app-release.aab
            linux-artifacts/web-release.zip
            windows-artifacts/Release-${{ env.VERSION }}.zip
            windows-artifacts/release-${{ env.VERSION }}.msix

  deploy:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4